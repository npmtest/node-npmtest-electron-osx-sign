{"/home/travis/build/npmtest/node-npmtest-electron-osx-sign/test.js":"/* istanbul instrument in package npmtest_electron_osx_sign */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-osx-sign/lib.npmtest_electron_osx_sign.js":"/* istanbul instrument in package npmtest_electron_osx_sign */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electron_osx_sign = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electron_osx_sign = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-osx-sign/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electron-osx-sign && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electron_osx_sign */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electron_osx_sign\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electron_osx_sign.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_electron_osx_sign.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electron_osx_sign.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_electron_osx_sign.__dirname + '/lib.npmtest_electron_osx_sign.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-osx-sign/node_modules/electron-osx-sign/index.js":"/**\n * @module electron-osx-sign\n */\n\n'use strict'\n\nconst sign = require('./sign')\nconst flat = require('./flat')\n\n/**\n * This function is a normal callback implementation.\n * @param {Object} opts - Options.\n * @param {RequestCallback} cb - Callback.\n */\nmodule.exports = sign.sign // Aliasing\n\n/**\n * This function is a normal callback implementation.\n * @function\n * @param {Object} opts - Options.\n * @param {RequestCallback} cb - Callback.\n */\nmodule.exports.sign = sign.sign\n\n/**\n * This function returns a promise signing the application.\n * @function\n * @param {mixed} opts - Options.\n * @returns {Promise} Promise.\n */\nmodule.exports.signAsync = sign.signAsync\n\n/**\n * This function is exported with normal callback implementation.\n * @function\n * @param {Object} opts - Options.\n * @param {RequestCallback} cb - Callback.\n */\nmodule.exports.flat = flat.flat\n\n/**\n * This function is exported and returns a promise flattening the application.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise.\n */\nmodule.exports.flatAsync = flat.flatAsync\n","/home/travis/build/npmtest/node-npmtest-electron-osx-sign/node_modules/electron-osx-sign/sign.js":"/**\n * @module sign\n */\n\n'use strict'\n\nconst path = require('path')\n\nconst Promise = require('bluebird')\nconst compareVersion = require('compare-version')\n\nconst util = require('./util')\nconst debuglog = util.debuglog\nconst debugwarn = util.debugwarn\nconst getAppContentsPath = util.getAppContentsPath\nconst execFileAsync = util.execFileAsync\nconst validateOptsAppAsync = util.validateOptsAppAsync\nconst validateOptsPlatformAsync = util.validateOptsPlatformAsync\nconst walkAsync = util.walkAsync\nconst findIdentitiesAsync = require('./util-identities').findIdentitiesAsync\nconst preEmbedProvisioningProfile = require('./util-provisioning-profiles').preEmbedProvisioningProfile\nconst preAutoEntitlements = require('./util-entitlements').preAutoEntitlements\n\n/**\n * This function returns a promise validating opts.binaries, the additional binaries to be signed along with the discovered enclosed components.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise.\n */\nfunction validateOptsBinariesAsync (opts) {\n  return new Promise(function (resolve, reject) {\n    if (opts.binaries) {\n      if (!Array.isArray(opts.binaries)) {\n        reject(new Error('Additional binaries should be an Array.'))\n        return\n      }\n      // TODO: Presence check for binary files, reject if any does not exist\n    }\n    resolve()\n  })\n}\n\n/**\n * This function returns a promise validating all options passed in opts.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise.\n */\nfunction validateSignOptsAsync (opts) {\n  const ProvisioningProfile = require('./util-provisioning-profiles').ProvisioningProfile\n\n  if (opts.ignore) {\n    if (typeof opts.ignore !== 'function' && typeof opts.ignore !== 'string') return Promise.reject(new Error('Ignore filter should be either a function or a string.'))\n  }\n\n  if (opts['provisioning-profile']) {\n    if (typeof opts['provisioning-profile'] !== 'string' && !(opts['provisioning-profile'] instanceof ProvisioningProfile)) return Promise.reject(new Error('Path to provisioning profile should be a string or a ProvisioningProfile object.'))\n  }\n\n  if (opts['type']) {\n    if (opts['type'] !== 'development' && opts['type'] !== 'distribution') return Promise.reject(new Error('Type must be either `development` or `distribution`.'))\n  } else {\n    opts['type'] = 'distribution'\n  }\n\n  return Promise.map([\n    validateOptsAppAsync,\n    validateOptsPlatformAsync,\n    validateOptsBinariesAsync\n  ], function (validate) {\n    return validate(opts)\n  })\n}\n\n/**\n * This function returns a promise verifying the code sign of application bundle.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise resolving output.\n */\nfunction verifySignApplicationAsync (opts) {\n  // Verify with codesign\n  var compareVersion = require('compare-version')\n  var osRelease = require('os').release()\n  debuglog('Verifying application bundle with codesign...')\n  var promise = execFileAsync('codesign', [\n    '--verify',\n    '--deep',\n    '--verbose=2'\n  ]\n    .concat(compareVersion(osRelease, '15.0.0') >= 0 ? ['--strict'] : [], // Only pass strict flag in El Capitan and later\n      [opts.app]))\n\n  // Additionally test Gatekeeper acceptance for darwin platform\n  if (opts.platform === 'darwin' && opts['gatekeeper-assess'] !== false) {\n    promise = promise\n      .then(function () {\n        debuglog('Verifying Gatekeeper acceptance for darwin platform...')\n        return execFileAsync('spctl', [\n          '--assess',\n          '--type', 'execute',\n          '--verbose',\n          '--ignore-cache',\n          '--no-cache',\n          opts.app\n        ])\n      })\n  }\n\n  return promise\n    .thenReturn()\n}\n\n/**\n * This function returns a promise codesigning only.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise.\n */\nfunction signApplicationAsync (opts) {\n  return walkAsync(getAppContentsPath(opts))\n    .then(function (childPaths) {\n      function ignoreFilePath (opts, filePath) {\n        if (opts.ignore) {\n          if (typeof opts.ignore === 'function') {\n            return opts.ignore(filePath)\n          } else if (typeof opts.ignore === 'string') {\n            return filePath.match(opts.ignore)\n          }\n        }\n        return false\n      }\n\n      if (opts.binaries) childPaths = childPaths.concat(opts.binaries)\n\n      var args = [\n        '--sign', opts.identity,\n        '--force'\n      ]\n      if (opts.keychain) {\n        args.push('--keychain', opts.keychain)\n      }\n      if (opts.requirements) {\n        args.push('--requirements', opts.requirements)\n      }\n\n      var promise\n      if (opts.entitlements) {\n        // Sign with entitlements\n        promise = Promise.mapSeries(childPaths, function (filePath) {\n          if (ignoreFilePath(opts, filePath)) {\n            debuglog('Skipped... ' + filePath)\n            return\n          }\n          debuglog('Signing... ' + filePath)\n          return execFileAsync('codesign', args.concat('--entitlements', opts['entitlements-inherit'], filePath))\n        })\n          .then(function () {\n            debuglog('Signing... ' + opts.app)\n            return execFileAsync('codesign', args.concat('--entitlements', opts.entitlements, opts.app))\n          })\n      } else {\n        // Otherwise normally\n        promise = Promise.mapSeries(childPaths, function (filePath) {\n          if (ignoreFilePath(opts, filePath)) {\n            debuglog('Skipped... ' + filePath)\n            return\n          }\n          debuglog('Signing... ' + filePath)\n          return execFileAsync('codesign', args.concat(filePath))\n        })\n          .then(function () {\n            debuglog('Signing... ' + opts.app)\n            return execFileAsync('codesign', args.concat(opts.app))\n          })\n      }\n\n      return promise\n        .then(function () {\n          // Verify code sign\n          debuglog('Verifying...')\n          var promise = verifySignApplicationAsync(opts)\n            .then(function (result) {\n              debuglog('Verified.')\n            })\n\n          // Check entitlements if applicable\n          if (opts.entitlements) {\n            promise = promise\n              .then(function () {\n                debuglog('Displaying entitlements...')\n                return execFileAsync('codesign', [\n                  '--display',\n                  '--entitlements', ':-', // Write to standard output and strip off the blob header\n                  opts.app\n                ])\n              })\n              .then(function (result) {\n                debuglog('Entitlements:', '\\n',\n                  result)\n              })\n          }\n\n          return promise\n        })\n    })\n}\n\n/**\n * This function returns a promise signing the application.\n * @function\n * @param {mixed} opts - Options.\n * @returns {Promise} Promise.\n */\nvar signAsync = module.exports.signAsync = function (opts) {\n  return validateSignOptsAsync(opts)\n    .then(function () {\n      // Determine identity for signing\n      var promise\n      if (opts.identity) {\n        debuglog('`identity` passed in arguments.')\n        if (opts['identity-validation'] === false) {\n          return Promise.resolve()\n        }\n        promise = findIdentitiesAsync(opts, opts.identity)\n      } else {\n        debugwarn('No `identity` passed in arguments...')\n        if (opts.platform === 'mas') {\n          if (opts.type === 'distribution') {\n            debuglog('Finding `3rd Party Mac Developer Application` certificate for signing app distribution in the Mac App Store...')\n            promise = findIdentitiesAsync(opts, '3rd Party Mac Developer Application:')\n          } else {\n            debuglog('Finding `Mac Developer` certificate for signing app in development for the Mac App Store signing...')\n            promise = findIdentitiesAsync(opts, 'Mac Developer:')\n          }\n        } else {\n          debuglog('Finding `Developer ID Application` certificate for distribution outside the Mac App Store...')\n          promise = findIdentitiesAsync(opts, 'Developer ID Application:')\n        }\n      }\n      return promise\n        .then(function (identities) {\n          if (identities.length > 0) {\n            // Provisioning profile(s) found\n            if (identities.length > 1) {\n              debugwarn('Multiple identities found, will use the first discovered.')\n            } else {\n              debuglog('Found 1 identity.')\n            }\n            opts.identity = identities[0]\n          } else {\n            // No identity found\n            return Promise.reject(new Error('No identity found for signing.'))\n          }\n        })\n    })\n    .then(function () {\n      // Determine entitlements for code signing\n      var filePath\n      if (opts.platform === 'mas') {\n        // To sign apps for Mac App Store, an entitlements file is required, especially for app sandboxing (as well some other services).\n        // Fallback entitlements for sandboxing by default: Note this may cause troubles while running an signed app due to missing keys special to the project.\n        // Further reading: https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html\n        if (!opts.entitlements) {\n          filePath = path.join(__dirname, 'default.entitlements.mas.plist')\n          debugwarn('No `entitlements` passed in arguments:', '\\n',\n            '* Sandbox entitlements are required for Mac App Store distribution, your codesign entitlements file is default to:', filePath)\n          opts.entitlements = filePath\n        }\n        if (!opts['entitlements-inherit']) {\n          filePath = path.join(__dirname, 'default.entitlements.mas.inherit.plist')\n          debugwarn('No `entitlements-inherit` passed in arguments:', '\\n',\n            '* Sandbox entitlements file for enclosing app files is default to:', filePath)\n          opts['entitlements-inherit'] = filePath\n        }\n      } else {\n        // Not necessary to have entitlements for non Mac App Store distribution\n        if (!opts.entitlements) {\n          debugwarn('No `entitlements` passed in arguments:', '\\n',\n            '* Provide `entitlements` to specify entitlements file for codesign.')\n        } else {\n          // If entitlements is provided as a flag, fallback to default\n          if (opts.entitlements === true) {\n            filePath = path.join(__dirname, 'default.entitlements.darwin.plist')\n            debugwarn('`entitlements` not specified in arguments:', '\\n',\n              '* Provide `entitlements` to specify entitlements file for codesign.', '\\n',\n              '* Sandbox entitlements file for enclosing app files is default to:', filePath)\n            opts.entitlements = filePath\n          }\n          if (!opts['entitlements-inherit']) {\n            filePath = path.join(__dirname, 'default.entitlements.darwin.inherit.plist')\n            debugwarn('No `entitlements-inherit` passed in arguments:', '\\n',\n              '* Sandbox entitlements file for enclosing app files is default to:', filePath)\n            opts['entitlements-inherit'] = filePath\n          }\n        }\n      }\n    })\n    .then(function () {\n      // Pre-sign operations\n      var preSignOperations = []\n\n      if (opts['pre-embed-provisioning-profile'] === false) {\n        debugwarn('Pre-sign operation disabled for provisioning profile embedding:', '\\n',\n          '* Enable by setting `pre-embed-provisioning-profile` to `true`.')\n      } else {\n        debuglog('Pre-sign operation enabled for provisioning profile:', '\\n',\n          '* Disable by setting `pre-embed-previsioning-profile` to `false`.')\n        preSignOperations.push(preEmbedProvisioningProfile)\n      }\n\n      if (opts['pre-auto-entitlements'] === false) {\n        debugwarn('Pre-sign operation disabled for entitlements automation.')\n      } else {\n        debuglog('Pre-sign operation enabled for entitlements automation with versions >= `1.1.1`:', '\\n',\n          '* Disable by setting `pre-auto-entitlements` to `false`.')\n        if (opts.entitlements && (!opts.version || compareVersion(opts.version, '1.1.1') >= 0)) {\n          // Enable Mac App Store sandboxing without using temporary-exception, introduced in Electron v1.1.1. Relates to electron#5601\n          preSignOperations.push(preAutoEntitlements)\n        }\n      }\n\n      return Promise.mapSeries(preSignOperations, function (preSignOperation) {\n        return preSignOperation(opts)\n      })\n    })\n    .then(function () {\n      debuglog('Signing application...', '\\n',\n        '> Application:', opts.app, '\\n',\n        '> Platform:', opts.platform, '\\n',\n        '> Entitlements:', opts.entitlements, '\\n',\n        '> Child entitlements:', opts['entitlements-inherit'], '\\n',\n        '> Additional binaries:', opts.binaries, '\\n',\n        '> Identity:', opts.identity)\n      return signApplicationAsync(opts)\n    })\n    .then(function () {\n      // Post-sign operations\n      debuglog('Application signed.')\n    })\n}\n\n/**\n * This function is a normal callback implementation.\n * @function\n * @param {Object} opts - Options.\n * @param {RequestCallback} cb - Callback.\n */\nmodule.exports.sign = function (opts, cb) {\n  signAsync(opts)\n    .then(function () {\n      debuglog('Application signed: ' + opts.app)\n      if (cb) cb()\n    })\n    .catch(function (err) {\n      debuglog('Sign failed:')\n      if (err.message) debuglog(err.message)\n      else if (err.stack) debuglog(err.stack)\n      else debuglog(err)\n      if (cb) cb(err)\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-electron-osx-sign/node_modules/electron-osx-sign/util.js":"/**\n * @module util\n */\n\n'use strict'\n\nconst child = require('child_process')\nconst fs = require('fs')\nconst path = require('path')\n\nconst Promise = require('bluebird')\nconst debug = require('debug')\n\n/**\n * This callback is used across signing and flattening.\n * @callback RequestCallback\n * @param {?Error} err\n */\n\n/** @function */\nconst debuglog = module.exports.debuglog = debug('electron-osx-sign')\ndebuglog.log = console.log.bind(console)\n\n/** @function */\nconst debugwarn = module.exports.debugwarn = debug('electron-osx-sign:warn')\ndebugwarn.log = console.warn.bind(console)\n\n/** @function */\nconst isBinaryFileAsync = module.exports.isBinaryFileAsync = Promise.promisify(require('isbinaryfile'))\n\n/** @function */\nconst removePassword = function (input) {\n  return input.replace(/(-P |pass:|\\/p|-pass )([^ ]+)/, function (match, p1, p2) {\n    return `${p1}***`\n  })\n}\n\n/** @function */\nmodule.exports.execFileAsync = function (file, args, options) {\n  if (debuglog.enabled) {\n    debuglog('Executing...', file, args && Array.isArray(args) ? removePassword(args.join(' ')) : '')\n  }\n\n  return new Promise(function (resolve, reject) {\n    child.execFile(file, args, options, function (err, stdout, stderr) {\n      if (err) {\n        debuglog('Error executing file:', '\\n',\n          '> Stdout:', stdout, '\\n',\n          '> Stderr:', stderr)\n        reject(err)\n        return\n      }\n      resolve(stdout)\n    })\n  })\n}\n\n/** @function */\nconst lstatAsync = module.exports.lstatAsync = Promise.promisify(fs.lstat)\n\n/** @function */\nconst readdirAsync = module.exports.readdirAsync = Promise.promisify(fs.readdir)\n\n/** @function */\nmodule.exports.readFileAsync = Promise.promisify(fs.readFile)\n\n/** @function */\nmodule.exports.writeFileAsync = Promise.promisify(fs.writeFile)\n\n/**\n * This function returns a flattened list of elements from an array of lists.\n * @function\n * @param {*} list - List.\n * @returns Flattened list.\n */\nvar flatList = module.exports.flatList = function (list) {\n  function populateResult (list) {\n    if (!Array.isArray(list)) {\n      result.push(list)\n    } else if (list.length > 0) {\n      for (let item of list) if (item) populateResult(item)\n    }\n  }\n\n  var result = []\n  populateResult(list)\n  return result\n}\n\n/**\n * This function returns the path to app contents.\n * @function\n * @param {Object} opts - Options.\n * @returns {string} App contents path.\n */\nvar getAppContentsPath = module.exports.getAppContentsPath = function (opts) {\n  return path.join(opts.app, 'Contents')\n}\n\n/**\n * This function returns the path to app frameworks within contents.\n * @function\n * @param {Object} opts - Options.\n * @returns {string} App frameworks path.\n */\nvar getAppFrameworksPath = module.exports.getAppFrameworksPath = function (opts) {\n  return path.join(getAppContentsPath(opts), 'Frameworks')\n}\n\n/**\n * This function returns a promise copying a file from the source to the target.\n * @function\n * @param {string} source - Source path.\n * @param {string} target - Target path.\n * @returns {Promise} Promise.\n */\nmodule.exports.copyFileAsync = function (source, target) {\n  debuglog('Copying file...', '\\n',\n    '> Source:', source, '\\n',\n    '> Target:', target)\n  return new Promise(function (resolve, reject) {\n    var readStream = fs.createReadStream(source)\n    readStream.on('error', reject)\n    var writeStream = fs.createWriteStream(target)\n    writeStream.on('error', reject)\n    writeStream.on('close', resolve)\n    readStream.pipe(writeStream)\n  })\n}\n\n/**\n * This function returns a promise with platform resolved.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise resolving platform.\n */\nvar detectElectronPlatformAsync = module.exports.detectElectronPlatformAsync = function (opts) {\n  return new Promise(function (resolve) {\n    var appFrameworksPath = getAppFrameworksPath(opts)\n    // The presence of Squirrel.framework identifies a Mac App Store build as used in https://github.com/atom/electron/blob/master/docs/tutorial/mac-app-store-submission-guide.md\n    return lstatAsync(path.join(appFrameworksPath, 'Squirrel.framework'))\n      .then(function () {\n        resolve('darwin')\n      })\n      .catch(function () {\n        resolve('mas')\n      })\n  })\n}\n\n/**\n * This function returns a promise resolving the file path if file binary.\n * @function\n * @param {string} filePath - Path to file.\n * @returns {Promise} Promise resolving file path or undefined.\n */\nvar getFilePathIfBinaryAsync = module.exports.getFilePathIfBinaryAsync = function (filePath) {\n  return isBinaryFileAsync(filePath)\n    .then(function (isBinary) {\n      return isBinary ? filePath : undefined\n    })\n}\n\n/**\n * This function returns a promise validating opts.app, the application to be signed or flattened.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise.\n */\nmodule.exports.validateOptsAppAsync = function (opts) {\n  if (!opts.app) {\n    return Promise.reject(new Error('Path to aplication must be specified.'))\n  }\n  if (path.extname(opts.app) !== '.app') {\n    return Promise.reject(new Error('Extension of application must be `.app`.'))\n  }\n  return lstatAsync(opts.app)\n    .thenReturn()\n}\n\n/**\n * This function returns a promise validating opts.platform, the platform of Electron build. It allows auto-discovery if no opts.platform is specified.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise.\n */\nmodule.exports.validateOptsPlatformAsync = function (opts) {\n  if (opts.platform) {\n    if (opts.platform === 'mas' || opts.platform === 'darwin') {\n      return Promise.resolve()\n    } else {\n      debugwarn('`platform` passed in arguments not supported, checking Electron platform...')\n    }\n  } else {\n    debugwarn('No `platform` passed in arguments, checking Electron platform...')\n  }\n\n  return detectElectronPlatformAsync(opts)\n    .then(function (platform) {\n      opts.platform = platform\n    })\n}\n\n/**\n * This function returns a promise resolving all child paths within the directory specified.\n * @function\n * @param {string} dirPath - Path to directory.\n * @returns {Promise} Promise resolving child paths needing signing in order.\n */\nmodule.exports.walkAsync = function (dirPath) {\n  debuglog('Walking... ' + dirPath)\n\n  var unlinkAsync = Promise.promisify(fs.unlink)\n\n  function _walkAsync (dirPath) {\n    return readdirAsync(dirPath)\n      .then(function (names) {\n        return Promise.map(names, function (name) {\n          var filePath = path.join(dirPath, name)\n          return lstatAsync(filePath)\n            .then(function (stat) {\n              if (stat.isFile()) {\n                switch (path.extname(filePath)) {\n                  case '': // Binary\n                    if (path.basename(filePath)[0] !== '.') {\n                      return getFilePathIfBinaryAsync(filePath)\n                    } // Else reject hidden file\n                    break\n                  case '.dylib': // Dynamic library\n                  case '.node': // Native node addon\n                    return filePath\n                  case '.cstemp': // Temporary file generated from past codesign\n                    debuglog('Removing... ' + filePath)\n                    return unlinkAsync(filePath)\n                      .thenReturn(undefined)\n                  default:\n                    if (path.extname(filePath).indexOf(' ') >= 0) {\n                      // Still consider the file as binary if extension seems invalid\n                      return getFilePathIfBinaryAsync(filePath)\n                    }\n                }\n              } else if (stat.isDirectory() && !stat.isSymbolicLink()) {\n                return _walkAsync(filePath)\n                  .then(function (result) {\n                    switch (path.extname(filePath)) {\n                      case '.app': // Application\n                      case '.framework': // Framework\n                        result.push(filePath)\n                    }\n                    return result\n                  })\n              }\n            })\n        })\n      })\n  }\n\n  return _walkAsync(dirPath)\n    .then(flatList)\n}\n","/home/travis/build/npmtest/node-npmtest-electron-osx-sign/node_modules/electron-osx-sign/util-identities.js":"/**\n * @module util-identities\n */\n\n'use strict'\n\nconst util = require('./util')\nconst debuglog = util.debuglog\nconst flatList = util.flatList\nconst execFileAsync = util.execFileAsync\n\n/**\n * This function returns a promise checking the indentity proposed and updates the identity option to a exact finding from results.\n * @function\n * @param {Object} opts - Options.\n * @param {string} identity - The proposed identity.\n * @returns {Promise} Promise.\n */\nmodule.exports.findIdentitiesAsync = function (opts, identity) {\n  // Only to look for valid identities, excluding those flagged with\n  // CSSMERR_TP_CERT_EXPIRED or CSSMERR_TP_NOT_TRUSTED. Fixes #9\n\n  var args = [\n    'find-identity',\n    '-v'\n  ]\n  if (opts.keychain) {\n    args.push(opts.keychain)\n  }\n\n  return execFileAsync('security', args)\n    .then(function (result) {\n      return result.split('\\n').map(function (line) {\n        if (line.indexOf(identity) >= 0) {\n          var identityFound = line.substring(line.indexOf('\"') + 1, line.lastIndexOf('\"'))\n          debuglog('Identity:', '\\n',\n            '> Name:', identityFound)\n          return identityFound\n        }\n      })\n    })\n    .then(flatList)\n}\n","/home/travis/build/npmtest/node-npmtest-electron-osx-sign/node_modules/electron-osx-sign/util-provisioning-profiles.js":"/**\n * @module util-provisioning-profiles\n */\n\n'use strict'\n\nconst path = require('path')\n\nconst Promise = require('bluebird')\nconst plist = require('plist')\n\nconst util = require('./util')\nconst debuglog = util.debuglog\nconst debugwarn = util.debugwarn\nconst getAppContentsPath = util.getAppContentsPath\nconst flatList = util.flatList\nconst copyFileAsync = util.copyFileAsync\nconst execFileAsync = util.execFileAsync\nconst lstatAsync = util.lstatAsync\nconst readdirAsync = util.readdirAsync\n\n/**\n * @constructor\n * @param {string} filePath - Path to provisioning profile.\n * @param {Object} message - Decoded message in provisioning profile.\n */\nvar ProvisioningProfile = module.exports.ProvisioningProfile = function (filePath, message) {\n  this.filePath = filePath\n  this.message = message\n}\n\nObject.defineProperty(ProvisioningProfile.prototype, 'name', {\n  get: function () {\n    return this.message['Name']\n  }\n})\n\nObject.defineProperty(ProvisioningProfile.prototype, 'platforms', {\n  get: function () {\n    if ('ProvisionsAllDevices' in this.message) return ['darwin'] // Developer ID\n    else if (this.type === 'distribution') return ['mas'] // Mac App Store\n    else return ['darwin', 'mas'] // Mac App Development\n  }\n})\n\nObject.defineProperty(ProvisioningProfile.prototype, 'type', {\n  get: function () {\n    if ('ProvisionedDevices' in this.message) return 'development' // Mac App Development\n    else return 'distribution' // Developer ID or Mac App Store\n  }\n})\n\n/**\n * Returns a promise resolving to a ProvisioningProfile instance based on file.\n * @function\n * @param {string} filePath - Path to provisioning profile.\n * @returns {Promise} Promise.\n */\nvar getProvisioningProfileAsync = module.exports.getProvisioningProfileAsync = function (filePath) {\n  return execFileAsync('security', [\n    'cms',\n    '-D', // Decode a CMS message\n    '-i', filePath // Use infile as source of data\n  ])\n    .then(function (result) {\n      var provisioningProfile = new ProvisioningProfile(filePath, plist.parse(result))\n      debuglog('Provisioning profile:', '\\n',\n        '> Name:', provisioningProfile.name, '\\n',\n        '> Platforms:', provisioningProfile.platforms, '\\n',\n        '> Type:', provisioningProfile.type, '\\n',\n        '> Path:', provisioningProfile.filePath, '\\n',\n        '> Message:', provisioningProfile.message)\n      return provisioningProfile\n    })\n}\n\n/**\n * Returns a promise resolving to a list of suitable provisioning profile within the current working directory.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise.\n */\nvar findProvisioningProfilesAsync = module.exports.findProvisioningProfilesAsync = function (opts) {\n  return Promise.map([\n    process.cwd() // Current working directory\n  ], function (dirPath) {\n    return readdirAsync(dirPath)\n      .map(function (name) {\n        var filePath = path.join(dirPath, name)\n        return lstatAsync(filePath)\n          .then(function (stat) {\n            if (stat.isFile()) {\n              switch (path.extname(filePath)) {\n                case '.provisionprofile':\n                  return filePath\n              }\n            }\n            return undefined\n          })\n      })\n  })\n    .then(flatList)\n    .map(function (filePath) {\n      return getProvisioningProfileAsync(filePath)\n        .then(function (provisioningProfile) {\n          if (provisioningProfile.platforms.indexOf(opts.platform) >= 0 && provisioningProfile.type === opts.type) return provisioningProfile\n          debugwarn('Provisioning profile above ignored, not for ' + opts.platform + ' ' + opts.type + '.')\n          return undefined\n        })\n    })\n    .then(flatList)\n}\n\n/**\n * Returns a promise embedding the provisioning profile in the app Contents folder.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise.\n */\nmodule.exports.preEmbedProvisioningProfile = function (opts) {\n  function embedProvisioningProfile () {\n    if (opts['provisioning-profile']) {\n      debuglog('Looking for existing provisioning profile...')\n      var embeddedFilePath = path.join(getAppContentsPath(opts), 'embedded.provisionprofile')\n      return lstatAsync(embeddedFilePath)\n        .then(function (stat) {\n          debuglog('Found embedded provisioning profile:', '\\n',\n            '* Please manually remove the existing file if not wanted.', '\\n',\n            '* Current file at:', embeddedFilePath)\n        })\n        .catch(function (err) {\n          if (err.code === 'ENOENT') {\n            // File does not exist\n            debuglog('Embedding provisioning profile...')\n            return copyFileAsync(opts['provisioning-profile'].filePath, embeddedFilePath)\n          } else throw err\n        })\n    }\n  }\n\n  if (opts['provisioning-profile']) {\n    // User input provisioning profile\n    debuglog('`provisioning-profile` passed in arguments.')\n    if (opts['provisioning-profile'] instanceof ProvisioningProfile) {\n      return embedProvisioningProfile()\n    } else {\n      return getProvisioningProfileAsync(opts['provisioning-profile'])\n        .then(function (provisioningProfile) {\n          opts['provisioning-profile'] = provisioningProfile\n        })\n        .then(embedProvisioningProfile)\n    }\n  } else {\n    // Discover provisioning profile\n    debuglog('No `provisioning-profile` passed in arguments, will find in current working directory and in user library...')\n    return findProvisioningProfilesAsync(opts)\n      .then(function (provisioningProfiles) {\n        if (provisioningProfiles.length > 0) {\n          // Provisioning profile(s) found\n          if (provisioningProfiles.length > 1) {\n            debuglog('Multiple provisioning profiles found, will use the first discovered.')\n          } else {\n            debuglog('Found 1 provisioning profile.')\n          }\n          opts['provisioning-profile'] = provisioningProfiles[0]\n        } else {\n          // No provisioning profile found\n          debuglog('No provisioning profile found, will not embed profile in app contents.')\n        }\n      })\n      .then(embedProvisioningProfile)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-electron-osx-sign/node_modules/electron-osx-sign/util-entitlements.js":"/**\n * @module util-entitlements\n */\n\n'use strict'\n\nconst path = require('path')\n\nconst plist = require('plist')\nconst tempfile = require('tempfile')\n\nconst util = require('./util')\nconst debuglog = util.debuglog\nconst getAppContentsPath = util.getAppContentsPath\nconst readFileAsync = util.readFileAsync\nconst writeFileAsync = util.writeFileAsync\n\n/**\n * This function returns a promise completing the entitlements automation: The process includes checking in `Info.plist` for `ElectronTeamID` or setting parsed value from identity, and checking in entitlements file for `com.apple.security.application-groups` or inserting new into array. A temporary entitlements file may be created to replace the input for any changes introduced.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise.\n */\nmodule.exports.preAutoEntitlements = function (opts) {\n  // If entitlements file not provided, default will be used. Fixes #41\n  var appInfoPath = path.join(getAppContentsPath(opts), 'Info.plist')\n  var appInfo\n  var entitlements\n\n  debuglog('Automating entitlement app group...', '\\n',\n    '> Info.plist:', appInfoPath, '\\n',\n    '> Entitlements:', opts.entitlements)\n  return readFileAsync(opts.entitlements, 'utf8')\n    .then(function (result) {\n      entitlements = plist.parse(result)\n      if (!entitlements['com.apple.security.app-sandbox']) {\n        // Only automate when app sandbox enabled by user\n        return\n      }\n\n      return readFileAsync(appInfoPath, 'utf8')\n        .then(function (result) {\n          appInfo = plist.parse(result)\n          // Use ElectronTeamID in Info.plist if already specified\n          if (appInfo.ElectronTeamID) {\n            debuglog('`ElectronTeamID` found in `Info.plist`: ' + appInfo.ElectronTeamID)\n          } else {\n            // The team identifier in signing identity should not be trusted\n            if (opts['provisioning-profile']) {\n              appInfo.ElectronTeamID = opts['provisioning-profile'].message.Entitlements['com.apple.developer.team-identifier']\n              debuglog('`ElectronTeamID` not found in `Info.plist`, use parsed from provisioning profile: ' + appInfo.ElectronTeamID)\n            } else {\n              appInfo.ElectronTeamID = opts.identity.substring(opts.identity.indexOf('(') + 1, opts.identity.lastIndexOf(')'))\n              debuglog('`ElectronTeamID` not found in `Info.plist`, use parsed from signing identity: ' + appInfo.ElectronTeamID)\n            }\n            return writeFileAsync(appInfoPath, plist.build(appInfo), 'utf8')\n              .then(function () {\n                debuglog('Entitlements file updated:', '\\n',\n                  '> Info.plist:', appInfoPath)\n              })\n          }\n        })\n        .then(function () {\n          var appIdentifier = appInfo.ElectronTeamID + '.' + appInfo.CFBundleIdentifier\n          // Insert application identifier if not exists\n          if (entitlements['com.apple.application-identifier']) {\n            debuglog('`com.apple.application-identifier` found in entitlements file: ' + entitlements['com.apple.application-identifier'])\n          } else {\n            debuglog('`com.apple.application-identifier` not found in entitlements file, new inserted: ' + appIdentifier)\n            entitlements['com.apple.application-identifier'] = appIdentifier\n          }\n          // Insert developer team identifier if not exists\n          if (entitlements['com.apple.developer.team-identifier']) {\n            debuglog('`com.apple.developer.team-identifier` found in entitlements file: ' + entitlements['com.apple.developer.team-identifier'])\n          } else {\n            debuglog('`com.apple.developer.team-identifier` not found in entitlements file, new inserted: ' + appInfo.ElectronTeamID)\n            entitlements['com.apple.developer.team-identifier'] = appInfo.ElectronTeamID\n          }\n          // Init entitlements app group key to array if not exists\n          if (!entitlements['com.apple.security.application-groups']) {\n            entitlements['com.apple.security.application-groups'] = []\n          }\n          // Insert app group if not exists\n          if (entitlements['com.apple.security.application-groups'].indexOf(appIdentifier) === -1) {\n            debuglog('`com.apple.security.application-groups` not found in entitlements file, new inserted: ' + appIdentifier)\n            entitlements['com.apple.security.application-groups'].push(appIdentifier)\n          } else {\n            debuglog('`com.apple.security.application-groups` found in entitlements file: ' + appIdentifier)\n          }\n          // Create temporary entitlements file\n          var entitlementsPath = tempfile('.plist')\n          opts.entitlements = entitlementsPath\n          return writeFileAsync(entitlementsPath, plist.build(entitlements), 'utf8')\n            .then(function () {\n              debuglog('Entitlements file updated:', '\\n',\n                '> Entitlements:', entitlementsPath)\n            })\n        })\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-electron-osx-sign/node_modules/electron-osx-sign/flat.js":"/**\n * @module flat\n */\n\n'use strict'\n\nconst path = require('path')\n\nconst Promise = require('bluebird')\n\nconst util = require('./util')\nconst debuglog = util.debuglog\nconst debugwarn = util.debugwarn\nconst execFileAsync = util.execFileAsync\nconst validateOptsAppAsync = util.validateOptsAppAsync\nconst validateOptsPlatformAsync = util.validateOptsPlatformAsync\nconst findIdentitiesAsync = require('./util-identities').findIdentitiesAsync\n\n/**\n * This function returns a promise validating all options passed in opts.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise.\n */\nfunction validateFlatOptsAsync (opts) {\n  if (opts.pkg) {\n    if (typeof opts.pkg !== 'string') return Promise.reject(new Error('`pkg` must be a string.'))\n    if (path.extname(opts.pkg) !== '.pkg') return Promise.reject(new Error('Extension of output package must be `.pkg`.'))\n  } else {\n    debugwarn('No `pkg` passed in arguments, will fallback to default inferred from the given application.')\n    opts.pkg = path.join(path.dirname(opts.app), path.basename(opts.app, '.app') + '.pkg')\n  }\n\n  if (opts.install) {\n    if (typeof opts.install !== 'string') return Promise.reject(new Error('`install` must be a string.'))\n  } else {\n    debugwarn('No `install` passed in arguments, will fallback to default `/Applications`.')\n    opts.install = '/Applications'\n  }\n\n  return Promise.map([\n    validateOptsAppAsync,\n    validateOptsPlatformAsync\n  ], function (validate) {\n    return validate(opts)\n  })\n}\n\n/**\n * This function returns a promise flattening the application.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise.\n */\nfunction flatApplicationAsync (opts) {\n  var args = [\n    '--component', opts.app, opts.install,\n    '--sign', opts.identity,\n    opts.pkg\n  ]\n  if (opts.keychain) {\n    args.unshift('--keychain', opts.keychain)\n  }\n  if (opts.scripts) {\n    args.unshift('--scripts', opts.scripts)\n  }\n\n  debuglog('Flattening... ' + opts.app)\n  return execFileAsync('productbuild', args)\n    .thenReturn(undefined)\n}\n\n/**\n * This function is exported and returns a promise flattening the application.\n * @function\n * @param {Object} opts - Options.\n * @returns {Promise} Promise.\n */\nvar flatAsync = module.exports.flatAsync = function (opts) {\n  return validateFlatOptsAsync(opts)\n    .then(function () {\n      var promise\n      if (opts.identity) {\n        debuglog('`identity` passed in arguments.')\n        promise = findIdentitiesAsync(opts, opts.identity)\n      } else {\n        debugwarn('No `identity` passed in arguments...')\n        if (opts.platform === 'mas') {\n          debuglog('Finding `3rd Party Mac Developer Installer` certificate for flattening app distribution in the Mac App Store...')\n          promise = findIdentitiesAsync(opts, '3rd Party Mac Developer Installer:')\n        } else {\n          debuglog('Finding `Developer ID Application` certificate for distribution outside the Mac App Store...')\n          promise = findIdentitiesAsync(opts, 'Developer ID Installer:')\n        }\n      }\n      return promise\n        .then(function (identities) {\n          if (identities.length > 0) {\n            // Provisioning profile(s) found\n            if (identities.length > 1) {\n              debugwarn('Multiple identities found, will use the first discovered.')\n            } else {\n              debuglog('Found 1 identity.')\n            }\n            opts.identity = identities[0]\n          } else {\n            // No identity found\n            return Promise.reject(new Error('No identity found for signing.'))\n          }\n        })\n    })\n    .then(function () {\n      // Pre-flat operations\n    })\n    .then(function () {\n      debuglog('Flattening application...', '\\n',\n        '> Application:', opts.app, '\\n',\n        '> Package output:', opts.pkg, '\\n',\n        '> Install path:', opts.install, '\\n',\n        '> Identity:', opts.identity, '\\n',\n        '> Scripts:', opts.scripts)\n      return flatApplicationAsync(opts)\n    })\n    .then(function () {\n      // Post-flat operations\n      debuglog('Application flattened.')\n    })\n}\n\n/**\n * This function is exported with normal callback implementation.\n * @function\n * @param {Object} opts - Options.\n * @param {RequestCallback} cb - Callback.\n */\nmodule.exports.flat = function (opts, cb) {\n  flatAsync(opts)\n    .then(function () {\n      debuglog('Application flattened, saved to: ' + opts.app)\n      if (cb) cb()\n    })\n    .catch(function (err) {\n      debuglog('Flat failed:')\n      if (err.message) debuglog(err.message)\n      else if (err.stack) debuglog(err.stack)\n      else debuglog(err)\n      if (cb) cb(err)\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-electron-osx-sign/node_modules/electron-osx-sign/bin/electron-osx-flat.js":"#!/usr/bin/env node\n\nvar fs = require('fs')\nvar path = require('path')\nvar args = require('minimist')(process.argv.slice(2), {\n  'boolean': [\n    'help'\n  ]\n})\nvar usage = fs.readFileSync(path.join(__dirname, 'electron-osx-flat-usage.txt')).toString()\nvar flat = require('../').flat\n\nargs.app = args._.shift()\n\nif (!args.app || args.help) {\n  console.log(usage)\n  process.exit(0)\n}\n\n// Remove excess arguments\ndelete args._\ndelete args.help\n\nflat(args, function done (err) {\n  if (err) {\n    console.error('Flat failed:')\n    if (err.message) console.error(err.message)\n    else if (err.stack) console.error(err.stack)\n    else console.log(err)\n    process.exit(1)\n  }\n  console.log('Application flattened, saved to:', args.pkg)\n  process.exit(0)\n})\n","/home/travis/build/npmtest/node-npmtest-electron-osx-sign/node_modules/electron-osx-sign/bin/electron-osx-sign.js":"#!/usr/bin/env node\n\nvar fs = require('fs')\nvar path = require('path')\nvar args = require('minimist')(process.argv.slice(2), {\n  'boolean': [\n    'help',\n    'pre-auto-entitlements',\n    'pre-embed-provisioning-profile',\n    'gatekeeper-assess'\n  ],\n  'default': {\n    'pre-auto-entitlements': true,\n    'pre-embed-provisioning-profile': true,\n    'gatekeeper-assess': true\n  }\n})\nvar usage = fs.readFileSync(path.join(__dirname, 'electron-osx-sign-usage.txt')).toString()\nvar sign = require('../').sign\n\nargs.app = args._.shift()\nargs.binaries = args._\n\nif (!args.app || args.help) {\n  console.log(usage)\n  process.exit(0)\n}\n\n// Remove excess arguments\ndelete args._\ndelete args.help\n\nsign(args, function done (err) {\n  if (err) {\n    console.error('Sign failed:')\n    if (err.message) console.error(err.message)\n    else if (err.stack) console.error(err.stack)\n    else console.log(err)\n    process.exit(1)\n  }\n  console.log('Application signed:', args.app)\n  process.exit(0)\n})\n"}